import org.jsonschema2pojo.DefaultGenerationConfig;
import org.jsonschema2pojo.GenerationConfig;
import org.jsonschema2pojo.SchemaGenerator;
import org.jsonschema2pojo.SchemaMapper;
import org.jsonschema2pojo.SourceType;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;

public class JsonSchemaToPojoConverter {
    public static void main(String[] args) {
        String schemaFilePath = "path/to/schema.json";
        String outputFolderPath = "path/to/output";

        try {
            generatePojoClasses(schemaFilePath, outputFolderPath);
            System.out.println("POJO classes generated successfully in: " + outputFolderPath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void generatePojoClasses(String schemaFilePath, String outputFolderPath) throws IOException {
        File schemaFile = new File(schemaFilePath);

        GenerationConfig config = new DefaultGenerationConfig() {
            @Override
            public boolean isGenerateBuilders() {
                return true; // Enable builder pattern for generated POJOs
            }

            @Override
            public SourceType getSourceType() {
                return SourceType.JSONSCHEMA;
            }

            @Override
            public boolean isUsePrimitives() {
                return true; // Use primitive types instead of wrapper types
            }
        };

        SchemaMapper mapper = new SchemaMapper(config, new SchemaGenerator());
        mapper.generate(schemaFile, outputFolderPath);
    }
}
