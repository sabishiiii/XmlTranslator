import org.jsonschema2pojo.DefaultGenerationConfig;
import org.jsonschema2pojo.GenerationConfig;
import org.jsonschema2pojo.SchemaGenerator;
import org.jsonschema2pojo.SchemaMapper;
import org.jsonschema2pojo.SourceType;
import org.jsonschema2pojo.rules.RuleFactory;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;

public class JsonSchemaToPojoConverter {
    public static void main(String[] args) {
        String schemaFilePath = "path/to/schema.json";
        String outputFolderPath = "path/to/output";

        try {
            generatePojoClasses(schemaFilePath, outputFolderPath);
            System.out.println("POJO classes generated successfully in: " + outputFolderPath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void generatePojoClasses(String schemaFilePath, String outputFolderPath) throws IOException {
        File schemaFile = new File(schemaFilePath);

        GenerationConfig config = new DefaultGenerationConfig() {
            @Override
            public boolean isGenerateBuilders() {
                return true; // Enable builder pattern for generated POJOs
            }

            @Override
            public SourceType getSourceType() {
                return SourceType.JSONSCHEMA;
            }
        };

        SchemaMapper mapper = new SchemaMapper(new RuleFactory(config, new Jackson2Annotator(config), new SchemaStore()), new SchemaGenerator());
        mapper.generate(new File(outputFolderPath), "com.example", "GeneratedPOJO", schemaFile);

        // Optionally, save the generated POJO code to files
        savePojoCodeToFile(outputFolderPath, "com.example", "GeneratedPOJO");
    }

    private static void savePojoCodeToFile(String outputFolderPath, String packageName, String className) throws IOException {
        String pojoCode = generatePojoCode(packageName, className);

        String packagePath = packageName.replace(".", "/");
        String filePath = outputFolderPath + "/" + packagePath + "/" + className + ".java";

        Path outputPath = Path.of(filePath);
        Files.createDirectories(outputPath.getParent());
        Files.writeString(outputPath, pojoCode, StandardOpenOption.CREATE);
    }

    private static String generatePojoCode(String packageName, String className) {
        StringBuilder codeBuilder = new StringBuilder();
        codeBuilder.append("package ").append(packageName).append(";\n\n");
        codeBuilder.append("public class ").append(className).append(" {\n");
        // Add additional code generation logic here based on the desired structure of the POJOs
        codeBuilder.append("}\n");
        return codeBuilder.toString();
    }
}
