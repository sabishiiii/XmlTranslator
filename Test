import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.stubbing.Answer;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

public class TranslatorControllerTest {
    private MockMvc mockMvc;

    @Mock
    private TranslatorService translatorService;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        TranslatorController translatorController = new TranslatorController(translatorService);
        mockMvc = MockMvcBuilders.standaloneSetup(translatorController).build();
    }

    @Test
    public void testJsonToXmlConversion() throws Exception {
        String json = "{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}";
        String expectedXml = "<root><name>John</name><age>30</age><city>New York</city></root>";

        doAnswer((Answer<Void>) invocation -> {
            Object[] args = invocation.getArguments();
            String inputJson = (String) args[0];
            // Perform any necessary assertions or actions with the inputJson
            return null;
        }).when(translatorService).jsonToXml(anyString());

        MvcResult result = mockMvc.perform(MockMvcRequestBuilders.post("/json-to-xml")
                .contentType(MediaType.APPLICATION_JSON)
                .content(json))
                .andExpect(status().isOk())
                .andReturn();

        verify(translatorService, times(1)).jsonToXml(json);
    }

    @Test
    public void testXmlToJsonConversion() throws Exception {
        String xml = "<root><name>John</name><age>30</age><city>New York</city></root>";
        String expectedJson = "{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}";

        doAnswer((Answer<Void>) invocation -> {
            Object[] args = invocation.getArguments();
            String inputXml = (String) args[0];
            // Perform any necessary assertions or actions with the inputXml
            return null;
        }).when(translatorService).xmlToJson(anyString());

        MvcResult result = mockMvc.perform(MockMvcRequestBuilders.post("/xml-to-json")
                .contentType(MediaType.APPLICATION_XML)
                .content(xml))
                .andExpect(status().isOk())
                .andReturn();

        verify(translatorService, times(1)).xmlToJson(xml);
    }
}


