import org.apache.poi.ss.usermodel.*;

import org.json.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import java.io.File;
import java.io.FileOutputStream;

public class JsonToXmlConverter {
    public static void main(String[] args) {
        try {
            // Load JSON data from file
            File jsonFile = new File("Input/input.json");
            JSONObject jsonData = new JSONObject(jsonFile);

            // Load mapping sheet from Excel file
            File excelFile = new File("Input/mapping.xlsx");
            Workbook workbook = WorkbookFactory.create(excelFile);
            Sheet sheet = workbook.getSheetAt(0);

            // Convert JSON to XML
            Document xmlDocument = convertJsonToXml(jsonData, sheet);

            // Save XML to file
            File outputFile = new File("Output/output.xml");
            saveXmlToFile(xmlDocument, outputFile);

            System.out.println("Conversion completed successfully!");
        } catch (Exception e) {
            System.out.println("Error occurred during JSON to XML conversion:");
            e.printStackTrace();
        }
    }

    private static Document convertJsonToXml(JSONObject jsonData, Sheet sheet) {
        try {
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document xmlDocument = docBuilder.newDocument();

            Element rootElement = xmlDocument.createElement("Root");
            xmlDocument.appendChild(rootElement);

            for (Row row : sheet) {
                Cell xmlPathCell = row.getCell(0);  // XML Path column at index 0
                Cell jsonPathCell = row.getCell(5); // JSON Path column at index 5

                String xmlPath = xmlPathCell.getStringCellValue().trim(); // Trim leading/trailing spaces
                String jsonPath = jsonPathCell.getStringCellValue();

                // Skip the row if the JSON path is empty
                if (jsonPath.isEmpty()) {
                    continue;
                }

                // Sanitize XML path and JSON value
                xmlPath = sanitizeXmlString(xmlPath);
                jsonPath = sanitizeXmlString(jsonPath);

                // Process XML path
                Element element = createXmlElement(xmlPath, rootElement);
                String[] jsonPathElements = jsonPath.split("/");
                for (String jsonPathElement : jsonPathElements) {
                    JSONObject jsonObject = jsonData.getJSONObject(jsonPathElement);
                    if (jsonObject != null) {
                        addJsonToXmlElement(jsonObject, element);
                    }
                }
            }

            return xmlDocument;
        } catch (Exception e) {
            throw new RuntimeException("Error occurred during JSON to XML conversion", e);
        }
    }

    private static void addJsonToXmlElement(JSONObject jsonObject, Element parentElement) {
        for (String key : jsonObject.keySet()) {
            Object value = jsonObject.get(key);
            if (value instanceof JSONObject) {
                Element childElement = parentElement.getOwnerDocument().createElement(key);
                parentElement.appendChild(childElement);
                addJsonToXmlElement((JSONObject) value, childElement);
            } else {
                Element childElement = parentElement.getOwnerDocument().createElement(key);
                parentElement.appendChild(childElement);
                childElement.setTextContent(String.valueOf(value));
            }
        }
    }

    private static String sanitizeXmlString(String input) {
        input = input.replace("&", "&amp;");
        input = input.replace("<", "&lt;");
        input = input.replace(">", "&gt;");
        input = input.replace("\"", "&quot;");
        input = input.replace("'", "&apos;");
        return input;
    }

    private static Element createXmlElement(String xmlPath, Element parentElement) {
        String[] pathElements = xmlPath.split("/");
        Element currentElement = parentElement;
        for (String pathElement : pathElements) {
            Element childElement = currentElement.getElementsByTagName(pathElement).item(0);
            if (childElement == null) {
                childElement = currentElement.getOwnerDocument().createElement(pathElement);
                currentElement.appendChild(childElement);
            }
            currentElement = childElement;
        }
        return currentElement;
    }

    private static void saveXmlToFile(Document xmlDocument, File outputFile) {
        try {
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");

            DOMSource source = new DOMSource(xmlDocument);
            StreamResult result = new StreamResult(new FileOutputStream(outputFile));
            transformer.transform(source, result);
        } catch (Exception e) {
            throw new RuntimeException("Error occurred while saving XML to file", e);
        }
    }
}
