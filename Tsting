import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class TranslatorServiceImplTest {
    private static final String INPUT_DIRECTORY = "Input";
    private static final String MAPPING_DIRECTORY = "Mapping";
    private static final String JSON_INPUT_FILE = "jsonInput.json";

    @BeforeEach
    public void setup() throws IOException {
        // Create the Input directory if it doesn't exist
        Path inputDirectory = Paths.get(INPUT_DIRECTORY);
        if (!Files.exists(inputDirectory)) {
            Files.createDirectory(inputDirectory);
        }

        // Get the test case number from the test method name
        String testCaseNumber = getTestCaseNumber();

        // Construct the mapping sheet filename based on the test case number
        String mappingFilename = "mapping_" + testCaseNumber + ".xlsx";

        // Copy the mapping sheet to the Input directory for the test case
        Path mappingFile = Paths.get(MAPPING_DIRECTORY, mappingFilename);
        Path copiedMappingFile = inputDirectory.resolve("mapping.xlsx");
        Files.copy(mappingFile, copiedMappingFile);

        // Save the input JSON in the Input directory as "jsonInput.json"
        String jsonInput = "{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}";
        Path inputFile = inputDirectory.resolve(JSON_INPUT_FILE);
        Files.write(inputFile, jsonInput.getBytes());
    }

    @Test
    public void testJsonToXmlConversion_TestCase1() {
        // Expected XML output
        String expectedXml = "<root><name>John</name><age>30</age><city>New York</city></root>";

        // Create an instance of the TranslatorServiceImpl
        TranslatorServiceImpl translatorService = new TranslatorServiceImpl();

        // Perform the JSON to XML conversion
        translatorService.jsonToXml();

        // Read the generated XML from the Output directory
        String actualXml = readOutputFile("output.xml");

        // Assert the expected XML output
        Assertions.assertEquals(expectedXml, actualXml);
    }

    @Test
    public void testJsonToXmlConversion_TestCase2() {
        // Expected XML output
        String expectedXml = "<root><name>Alice</name><age>25</age><city>London</city></root>";

        // Create an instance of the TranslatorServiceImpl
        TranslatorServiceImpl translatorService = new TranslatorServiceImpl();

        // Perform the JSON to XML conversion
        translatorService.jsonToXml();

        // Read the generated XML from the Output directory
        String actualXml = readOutputFile("output.xml");

        // Assert the expected XML output
        Assertions.assertEquals(expectedXml, actualXml);
    }

    @Test
    public void testJsonToXmlConversion_TestCase3() {
        // Expected XML output
        String expectedXml = "<root><name>Bob</name><age>40</age><city>Paris</city></root>";

        // Create an instance of the TranslatorServiceImpl
        TranslatorServiceImpl translatorService = new TranslatorServiceImpl();

        // Perform the JSON to XML conversion
        translatorService.jsonToXml();

        // Read the generated XML from the Output directory
        String actualXml = readOutputFile("output.xml");

        // Assert the expected XML output
        Assertions.assertEquals(expectedXml, actualXml);
    }

    // ...

    private String readOutputFile(String filename) {
        try {
            Path outputFile = Paths.get("Output", filename);
            return Files.readString(outputFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    private String getTestCaseNumber() {
        // Get the test method name
        String methodName = new Throwable().getStackTrace()[2].getMethodName();

        // Extract the test case number from the method name
        String testCaseNumber = methodName.substring(methodName.indexOf("_") + 1);

        return testCaseNumber;
    }
