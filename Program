import org.apache.commons.io.FileUtils;
import org.apache.poi.ss.usermodel.*;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.util.Iterator;

public class JsonToXmlConverter {

    public static void main(String[] args) {
        try {
            // Load the mapping sheet from the Excel file
            File mappingFile = new File("mapping.xlsx");
            Workbook workbook = WorkbookFactory.create(mappingFile);
            Sheet sheet = workbook.getSheetAt(0);

            // Read the JSON input
            File jsonFile = new File("input.json");
            String jsonData = FileUtils.readFileToString(jsonFile, "UTF-8");

            // Convert JSON to XML
            Document xmlDocument = convertJsonToXml(jsonData, sheet);

            // Write XML to file
            File outputFile = new File("output.xml");
            writeXmlToFile(xmlDocument, outputFile);

            System.out.println("Conversion completed successfully.");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static Document convertJsonToXml(String jsonData, Sheet sheet) throws Exception {
        // Create XML document and root element
        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
        Document xmlDocument = docBuilder.newDocument();

        Element rootElement = xmlDocument.createElement("Root");
        xmlDocument.appendChild(rootElement);

        // Convert JSON data to XML
        JSONObject jsonObject = new JSONObject(jsonData);
        convertJsonObjectToXml(jsonObject, rootElement, sheet);

        return xmlDocument;
    }

    private static void convertJsonObjectToXml(JSONObject jsonObject, Element parentElement, Sheet sheet) {
        Iterator<String> keys = jsonObject.keys();
        while (keys.hasNext()) {
            String key = keys.next();
            Object value = jsonObject.get(key);

            if (value instanceof JSONObject) {
                // Nested JSON object
                JSONObject nestedJsonObject = (JSONObject) value;
                Cell xmlPathCell = findXmlPathCellForKey(sheet, key);
                String xmlPath = xmlPathCell.getStringCellValue();
                Element nestedElement = createXmlElement(xmlPath, parentElement);
                convertJsonObjectToXml(nestedJsonObject, nestedElement, sheet);
            } else {
                // Leaf node value
                Cell xmlPathCell = findXmlPathCellForKey(sheet, key);
                String xmlPath = xmlPathCell.getStringCellValue();
                String leafValue = value.toString();
                Element element = createXmlElement(xmlPath, parentElement);
                element.setTextContent(leafValue);
            }
        }
    }

    private static Cell findXmlPathCellForKey(Sheet sheet, String key) {
        for (Row row : sheet) {
            Cell jsonPathCell = row.getCell(5);
            if (jsonPathCell != null && jsonPathCell.getStringCellValue().equals(key)) {
                return row.getCell(0);
            }
        }
        return null;
    }

    private static Element createXmlElement(String xmlPath, Element parentElement) {
        String[] pathElements = xmlPath.split("/");
        Element currentElement = parentElement;
        for (String pathElement : pathElements) {
            Element childElement = currentElement.getElementsByTagName(pathElement).item(0);
            if (childElement == null) {
                childElement = currentElement.getOwnerDocument().createElement(pathElement);
                currentElement.appendChild(childElement);
            }
            currentElement = childElement;
        }
        return currentElement;
    }

    private static void writeXmlToFile(Document xmlDocument, File outputFile) throws Exception {
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        DOMSource source = new DOMSource(xmlDocument);
        StreamResult result = new StreamResult(outputFile);
        transformer.transform(source, result);
    }
}
