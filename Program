import org.apache.poi.ss.usermodel.*;
import org.json.JSONObject;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Iterator;

public class JsonToXmlConverter {

    public static void main(String[] args) {
        try {
            // Specify the input and output directories
            String inputDir = "Input";
            String outputDir = "Output";

            // Load the mapping sheet from the Excel file
            File mappingFile = new File(inputDir + File.separator + "mapping.xlsx");
            Workbook workbook = WorkbookFactory.create(mappingFile);
            Sheet sheet = workbook.getSheetAt(0);

            // Read the JSON input
            String jsonData = new String(Files.readAllBytes(Paths.get(inputDir + File.separator + "input.json")));
            JSONObject jsonObject = new JSONObject(jsonData);

            // Create the XML document
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            org.w3c.dom.Document xmlDocument = documentBuilder.newDocument();

            // Process each row in the mapping sheet
            Iterator<Row> rowIterator = sheet.iterator();
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                Cell xmlPathCell = row.getCell(0);
                Cell jsonPathCell = row.getCell(5);

                String xmlPath = xmlPathCell.getStringCellValue();
                String jsonPath = jsonPathCell.getStringCellValue();

                // Get the value from the JSON based on the JSON path
                Object value = jsonObject.query(jsonPath);

                // Set the value in the XML document
                setValueByPath(xmlDocument, xmlPath, value);
            }

            // Write the XML document to the output file
            File outputFile = new File(outputDir + File.separator + "output.xml");
            writeXmlToFile(xmlDocument, outputFile);

            System.out.println("JSON to XML conversion completed successfully.");
        } catch (Exception e) {
            System.out.println("Error occurred during JSON to XML conversion: " + e.getMessage());
        }
    }

    private static void setValueByPath(org.w3c.dom.Document xmlDocument, String xmlPath, Object value) {
        String[] pathSegments = xmlPath.split("/");
        org.w3c.dom.Node currentNode = xmlDocument.getDocumentElement();

        for (int i = 1; i < pathSegments.length; i++) {
            String segment = pathSegments[i];

            if (segment.isEmpty()) {
                continue;
            }

            org.w3c.dom.Node matchingChild = null;
            org.w3c.dom.NodeList children = currentNode.getChildNodes();
            for (int j = 0; j < children.getLength(); j++) {
                org.w3c.dom.Node child = children.item(j);
                if (child.getNodeName().equals(segment)) {
                    matchingChild = child;
                    break;
                }
            }

            if (matchingChild == null) {
                matchingChild = xmlDocument.createElement(segment);
                currentNode.appendChild(matchingChild);
            }

            if (i == pathSegments.length - 1) {
                matchingChild.setTextContent(value.toString());
            }

            currentNode = matchingChild;
        }
    }

    private static void writeXmlToFile(org.w3c.dom.Document xmlDocument, File outputFile) throws Exception {
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        DOMSource source = new DOMSource(xmlDocument);
        StreamResult result = new StreamResult(outputFile);
        transformer.transform(source, result);
    }
}



